<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>indi.tudan</groupId>
	<artifactId>learn-proxy</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>learn-proxy</name>
	<description>learn-proxy</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<skipTests>true</skipTests>
		<application.name>${artifactId}</application.name>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.github.monkeywie</groupId>
			<artifactId>proxyee</artifactId>
			<version>1.5.4</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<resources>

			<!-- 启停脚本 -->
			<resource>
				<directory>bin</directory>
				<!-- 先排除所有的配置文件 -->
				<excludes>
					<exclude>*.sh</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>bin</directory>
				<!-- 引入所需环境的配置文件 -->
				<filtering>true</filtering>
				<includes>
					<include>*.sh</include>
				</includes>
				<targetPath>${basedir}/release/${project.artifactId}</targetPath>
			</resource>

			<!-- mybatis xml -->
			<resource>
				<directory>src/main/java</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>

			<!-- config 配置文件 -->
			<resource>
				<directory>src/main/resources</directory>
				<!-- 引入所需环境的配置文件 -->
				<filtering>true</filtering>
				<includes>
					<include>application.yml</include>
				</includes>
				<targetPath>${basedir}/release/${project.artifactId}/config</targetPath>
			</resource>

			<!-- jar 包内部 -->
			<resource>
				<directory>src/main/resources</directory>
				<!-- 先排除所有的配置文件 -->
				<excludes>
					<exclude>application*.yml</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<!-- 引入所需环境的配置文件 -->
				<filtering>true</filtering>
				<includes>
					<include>application.yml</include>
				</includes>
			</resource>

		</resources>

		<plugins>

			<!-- 删除插件 -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<executions>
					<execution>
						<id>clean</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<filesets>
								<fileset>
									<directory>${basedir}/release/${project.artifactId}</directory>
									<includes>**</includes>
								</fileset>
							</filesets>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 打包插件 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>indi.tudan.learnproxy.LearnProxyApplication</mainClass>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- 拷贝插件 -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase> <!-- maven生命周期 -->
						<configuration>
							<!-- 其他语法自行百度 maven-antrun-plugin 插件的相关用法 -->
							<target>
								<!--  文件将要输出目录 在parent pom中统一配置，此处引用即可-->
								<copy todir="${basedir}/release/${project.artifactId}">
									<!-- 待拷贝文件的目录，默认目录在项目的 target 下 -->
									<fileset dir="${project.build.directory}">
										<!-- 待拷贝文件，可以使用下面的通配符，还可以是其他目录的文件。此处需要与 project.bulid.finalName 对应，否则可能找不到文件 -->
										<!--<include name="${project.artifactId}.jar"/>-->
										<include name="*.jar"/>
									</fileset>
								</copy>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
